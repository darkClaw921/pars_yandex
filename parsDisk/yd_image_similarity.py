import os
from PIL import Image
import numpy as np
import sqlite3
import pickle
import io
from yadisk import YaDisk
from loguru import logger
from tqdm import tqdm
from dotenv import load_dotenv
import time
import requests
import asyncio

load_dotenv()

class YandexImageSimilarityFinder:
    def __init__(self, db_path='yd_image_database.db', bins=8, isTest=False):
        self.yadisk = YaDisk(
            os.getenv('APLICATION_ID'),
            os.getenv('APLICATION_SECRET'),
            os.getenv('TOKEN_YD')
        )
        self.db_path = db_path
        self.bins = bins
        
        if isTest:
            # self.pathMain = '/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª/–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï/'
            self.pathMain = '/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª/–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï/'
        else:
            # self.pathMain = '/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª/–ü–†–û–ï–ö–¢–´ - —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç—Å—é–¥–∞ –Ω–æ–≤—ã–µ/'
            self.pathMain = '/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª/BBase üóÑ/'
            
        self.setup_database()
        logger.add(
            "logs/yd_similarity_{time}.log",
            format="{time} - {level} - {message}",
            rotation="100 MB",
            retention="10 days",
            level="DEBUG"
        )

    def setup_database(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS images (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    image_path TEXT NOT NULL,
                    folder_path TEXT NOT NULL,
                    histogram BLOB NOT NULL,
                    md5_hash TEXT NOT NULL
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS folder_tags (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    folder_path TEXT NOT NULL,
                    tag TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS folder_status (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    source_folder TEXT NOT NULL,
                    target_folder TEXT NOT NULL,
                    new_path TEXT,
                    status TEXT NOT NULL,
                    processed_at TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')

    def calculate_histogram(self, image_data):
        """–í—ã—á–∏—Å–ª—è–µ—Ç RGB –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with Image.open(io.BytesIO(image_data)) as img:
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                img_array = np.array(img)
                
                hist_r = np.histogram(img_array[:,:,0], bins=self.bins, range=(0,256))[0]
                hist_g = np.histogram(img_array[:,:,1], bins=self.bins, range=(0,256))[0]
                hist_b = np.histogram(img_array[:,:,2], bins=self.bins, range=(0,256))[0]
                
                total_pixels = img.size[0] * img.size[1]
                hist_r = hist_r / total_pixels
                hist_g = hist_g / total_pixels
                hist_b = hist_b / total_pixels
                
                histogram = np.concatenate([hist_r, hist_g, hist_b])
                
                return pickle.dumps(histogram)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return None

    def scan_directory(self, public_link):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {public_link}")
        
        folder_project = self.yadisk.get_public_meta(public_link).name
        all_path = self.pathMain + folder_project + '/'
        
        folders = []
        for item in self.yadisk.get_meta(all_path).embedded.items:
            if item.file is None:
                folders.append(item.path.replace('disk:' + all_path, ''))
        
        total_files = 0
        processed_files = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        for folder in tqdm(folders, desc="–°–∫–∞–Ω–∏—Ä–æ–≤–Ω–∏–µ –ø–∞–ø–æ–∫"):
            current_path = all_path + folder
            try:
                files = self.yadisk.get_meta(current_path).embedded.items
                for file in files:
                    if file.file is not None and file.path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                        total_files += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {current_path}: {str(e)}")
                continue
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {total_files} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        with sqlite3.connect(self.db_path) as conn:
            for folder in tqdm(folders, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–æ–∫"):
                cursor = conn.cursor()
                current_path = all_path + folder
                try:
                    files = self.yadisk.get_meta(current_path).embedded.items
                    for file in files:
                        if file.file is not None and file.path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                            processed_files += 1
                            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ [{processed_files}/{total_files}]: {file.name}")
                            
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
                                download_link = self.yadisk.get_download_link(file.path)
                                
                                # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                                response = requests.get(download_link)
                                if response.status_code == 200:
                                    image_data = response.content
                                    histogram = self.calculate_histogram(image_data)
                                    if histogram:
                                        cursor.execute(
                                            'INSERT INTO images (image_path, folder_path, histogram, md5_hash) VALUES (?, ?, ?, ?)',
                                            (file.path, current_path, histogram, file.md5)
                                        )
                                        conn.commit()
                                    else:
                                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –¥–ª—è {file.name}")
                                else:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª {file.name}: {response.status_code}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file.name}: {str(e)}")
                                continue
                                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏ {current_path}: {str(e)}")
                    continue
        
        logger.info(f"\n–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_files} —Ñ–∞–π–ª–æ–≤")

    def calculate_similarity(self, hist1, hist2):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞–º–∏"""
        epsilon = 1e-10
        chi_square = np.sum((hist1 - hist2) ** 2 / (hist1 + hist2 + epsilon))
        similarity = 100 * np.exp(-chi_square)
        return similarity

    def find_similar_images(self, file_path, threshold=91):
        """–ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            response = self.yadisk.download(file_path, None)
            histogram = self.calculate_histogram(response.content)
            if not histogram:
                return None

            hist1 = pickle.loads(histogram)
            similar_images = []

            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT image_path, folder_path, histogram, md5_hash FROM images')
                
                for db_image_path, folder_path, db_histogram, md5_hash in cursor.fetchall():
                    hist2 = pickle.loads(db_histogram)
                    similarity = self.calculate_similarity(hist1, hist2)
                    if similarity >= threshold:
                        similar_images.append({
                            'file': os.path.basename(db_image_path),
                            'folder': folder_path,
                            'similarity': similarity,
                            'full_path': db_image_path,
                            'md5_hash': md5_hash
                        })
                
                if similar_images:
                    similar_images.sort(key=lambda x: x['similarity'], reverse=True)
                    
                    for idx, match in enumerate(similar_images, 1):
                        logger.info(f"\n–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ #{idx}:")
                        logger.info(f"–§–∞–π–ª: {match['file']}")
                        logger.info(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {match['full_path']}")
                        logger.info(f"–ü–∞–ø–∫–∞: {match['folder']}")
                        logger.info(f"MD5 —Ö—ç—à: {match['md5_hash']}")
                        logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏: {match['similarity']:.2f}%")
                    
                    return [match['folder'] for match in similar_images]
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            return None

    def check_local_image(self, local_image_path, threshold=91):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ"""
        try:
            with open(local_image_path, 'rb') as f:
                image_data = f.read()
            
            histogram = self.calculate_histogram(image_data)
            if not histogram:
                return None

            hist1 = pickle.loads(histogram)
            similar_images = []

            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT image_path, folder_path, histogram, md5_hash FROM images')
                
                for db_image_path, folder_path, db_histogram, md5_hash in cursor.fetchall():
                    hist2 = pickle.loads(db_histogram)
                    similarity = self.calculate_similarity(hist1, hist2)
                    if similarity >= threshold:
                        similar_images.append({
                            'file': os.path.basename(db_image_path),
                            'folder': folder_path,
                            'similarity': similarity,
                            'full_path': db_image_path,
                            'md5_hash': md5_hash
                        })
                
                if similar_images:
                    similar_images.sort(key=lambda x: x['similarity'], reverse=True)
                    
                    logger.info(f"\n–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {os.path.basename(local_image_path)}")
                    for idx, match in enumerate(similar_images, 1):
                        logger.info(f"\n–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ #{idx}:")
                        logger.info(f"–§–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ: {match['file']}")
                        logger.info(f"–ü—É—Ç—å –Ω–∞ –¥–∏—Å–∫–µ: {match['full_path']}")
                        logger.info(f"–ü–∞–ø–∫–∞: {match['folder']}")
                        logger.info(f"MD5 —Ö—ç—à: {match['md5_hash']}")
                        logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏: {match['similarity']:.2f}%")
                    
                    return similar_images
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {local_image_path}: {str(e)}")
            return None

    def upload_to_folder(self, local_image_path, target_folder):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            file_name = os.path.basename(local_image_path)
            target_path = f"{target_folder}/{file_name}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            try:
                self.yadisk.get_meta(target_path)
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∏–º–µ–Ω–∏ timestamp
                name, ext = os.path.splitext(file_name)
                file_name = f"{name}_{int(time.time())}{ext}"
                target_path = f"{target_folder}/{file_name}"
            except:
                pass

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
            self.yadisk.upload(local_image_path, target_path)
            logger.info(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É {target_folder}")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with open(local_image_path, 'rb') as f:
                image_data = f.read()
            
            histogram = self.calculate_histogram(image_data)
            if histogram:
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    # –ü–æ–ª—É—á–∞–µ–º MD5 —Ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    file_meta = self.yadisk.get_meta(target_path)
                    cursor.execute(
                        'INSERT INTO images (image_path, folder_path, histogram, md5_hash) VALUES (?, ?, ?, ?)',
                        (target_path, target_folder, histogram, file_meta.md5)
                    )
                    logger.info(f"–§–∞–π–ª {file_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {local_image_path}: {str(e)}")
            return False

    def is_folder_in_database(self, folder_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–∞–ø–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∏ –µ—ë –ø–æ–¥–ø–∞–ø–∫–∞—Ö —Å —É—á–µ—Ç–æ–º –ø—Ä–µ—Ñ–∏–∫—Å–∞ "disk:"
                patterns = [
                    f"{folder_path}%",  # –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                    f"disk:{folder_path}%"  # —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                ]
                cursor.execute('''
                    SELECT COUNT(*) FROM images 
                    WHERE image_path LIKE ? OR image_path LIKE ?
                    OR folder_path LIKE ? OR folder_path LIKE ?
                ''', (*patterns, *patterns))
                count = cursor.fetchone()[0]
                
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ {folder_path} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {count} —Ñ–∞–π–ª–æ–≤")
                
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                cursor.execute('SELECT DISTINCT folder_path FROM images')
                all_paths = cursor.fetchall()
                logger.info("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
                for path in all_paths:
                    logger.info(path[0])
                
                return count > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫ –ø–∞–ø–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False

    def compare_folders(self, folder1_path, folder2_path, threshold=91):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –ø–∞–ø–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        similar_photos = []
        logger.info(f"–°—Ä–∞–≤–Ω–∏–≤–∞—é –ø–∞–ø–∫–∏:\n{folder1_path}\n{folder2_path}")
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('SELECT COUNT(*) FROM images')
            total_images = cursor.fetchone()[0]
            logger.info(f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {total_images}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–∏ –∏ –µ—ë –ø–æ–¥–ø–∞–ø–æ–∫
            patterns1 = [f"{folder1_path}%", f"disk:{folder1_path}%"]
            query1 = '''
                SELECT image_path, histogram FROM images 
                WHERE image_path LIKE ? OR image_path LIKE ?
                OR folder_path LIKE ? OR folder_path LIKE ?
            '''
            cursor.execute(query1, (*patterns1, *patterns1))
            folder1_photos = cursor.fetchall()
            logger.info(f"SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–∏: {query1}")
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(folder1_photos)} —Ñ–æ—Ç–æ –≤ –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–µ")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –≤—Ç–æ—Ä–æ–π –ø–∞–ø–∫–∏ –∏ –µ—ë –ø–æ–¥–ø–∞–ø–æ–∫
            patterns2 = [f"{folder2_path}%", f"disk:{folder2_path}%"]
            query2 = '''
                SELECT image_path, histogram FROM images 
                WHERE image_path LIKE ? OR image_path LIKE ?
                OR folder_path LIKE ? OR folder_path LIKE ?
            '''
            cursor.execute(query2, (*patterns2, *patterns2))
            folder2_photos = cursor.fetchall()
            logger.info(f"SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–∞–ø–∫–∏: {query2}")
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(folder2_photos)} —Ñ–æ—Ç–æ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–∞–ø–∫–µ")
            
            if not folder1_photos or not folder2_photos:
                logger.warning("–û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –ø–∞–ø–∫–∏ –ø—É—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return similar_photos
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–∏ —Å –∫–∞–∂–¥–æ–π –∏–∑ –≤—Ç–æ—Ä–æ–π
            total_comparisons = len(folder1_photos) * len(folder2_photos)
            current_comparison = 0
            
            for path1, hist1_blob in folder1_photos:
                hist1 = pickle.loads(hist1_blob)
                
                for path2, hist2_blob in folder2_photos:
                    current_comparison += 1
                    if current_comparison % 100 == 0:
                        1+0
                        # logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {current_comparison}/{total_comparisons}")
                    
                    hist2 = pickle.loads(hist2_blob)
                    similarity = self.calculate_similarity(hist1, hist2)
                    
                    if similarity >= threshold:
                        similar_photos.append({
                            'file1': os.path.basename(path1),
                            'file2': os.path.basename(path2),
                            'similarity': similarity,
                            'full_path1': path1,
                            'full_path2': path2
                        })
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {path1} –∏ {path2} ({similarity:.2f}%)")
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(similar_photos)} –ø–æ—Ö–æ–∂–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        return similar_photos

    def get_all_files_from_folder(self, folder_path, exclude_files):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏, –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ"""
        files = []
        for item in self.yadisk.get_meta(folder_path).embedded.items:
            if item.file is not None and item.path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                if os.path.basename(item.path) not in exclude_files:
                    files.append(item.path)
        return files

    def move_file(self, source_path, target_folder):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        try:
            file_name = os.path.basename(source_path)
            target_path = f"{target_folder}/{file_name}"
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º timestamp
            try:
                self.yadisk.get_meta(target_path)
                name, ext = os.path.splitext(file_name)
                target_path = f"{target_folder}/{name}_{int(time.time())}{ext}"
            except:
                pass
            
            self.yadisk.move(source_path, target_path)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {source_path}: {str(e)}")
            return False

    def count_files_recursive(self, path):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö"""
        total = 0
        try:
            
            # path='disk:'+path
            print(path)
            items = self.yadisk.get_meta(path).embedded.items
            for item in items:
                if item.file is not None and item.path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                    total += 1
                elif item.file is None:  # –≠—Ç–æ –ø–∞–ø–∫–∞
                    total += self.count_files_recursive(item.path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ–∞–π–ª–æ–≤ –≤ {path}: {str(e)}")
        return total

    async def scan_directory_async(self, public_link, progress_callback):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {public_link}")
            
            folder_project = self.yadisk.get_public_meta(public_link).name
            


            all_path = self.pathMain + folder_project + '/'
            start_time = time.time()

            if folder_project == self.pathMain.split('/')[-2]:
                all_path = self.pathMain

            if folder_project == '/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª/BBase üóÑ/BBase/':
                all_path = self.pathMain
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            total_files = self.count_files_recursive(all_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
            logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
            
            if total_files == 0:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return False
            
            processed_files = [0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ —Å—Å—ã–ª–∫–µ
            files_added = [0]  # –°—á–µ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                await self.scan_folder_recursive(all_path, conn, cursor, processed_files, total_files, files_added, start_time, progress_callback)
            
            logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_files[0]} —Ñ–∞–π–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É {files_added[0]}")
            return files_added[0] > 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")
            return False

    async def scan_folder_recursive(self, path, conn, cursor, processed_files, total_files, files_added, start_time, progress_callback):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ –µ—ë –ø–æ–¥–ø–∞–ø–∫–∏"""
        try:
            items = self.yadisk.get_meta(path).embedded.items
            for item in items:
                if item.file is not None and item.path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—É—Ç–∏
                        cursor.execute(
                            'SELECT COUNT(*) FROM images WHERE image_path = ? OR image_path = ?', 
                            (item.path, f"disk:{item.path}")
                        )
                        if cursor.fetchone()[0] == 0:
                            download_link = self.yadisk.get_download_link(item.path)
                            
                            response = requests.get(download_link)
                            if response.status_code == 200:
                                image_data = response.content
                                histogram = self.calculate_histogram(image_data)
                                if histogram:
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "disk:"
                                    clean_path = item.path.replace('disk:', '')
                                    cursor.execute(
                                        'INSERT INTO images (image_path, folder_path, histogram, md5_hash) VALUES (?, ?, ?, ?)',
                                        (clean_path, path, histogram, item.md5)
                                    )
                                    conn.commit()
                                    files_added[0] += 1
                                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {clean_path} –≤ –ø–∞–ø–∫–µ: {path}")
                    
                        processed_files[0] += 1
                        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                        elapsed_time = time.time() - start_time
                        files_per_second = processed_files[0] / elapsed_time if elapsed_time > 0 else 0
                        remaining_files = total_files - processed_files[0]
                        estimated_time = remaining_files / files_per_second if files_per_second > 0 else 0
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                        estimated_minutes = int(estimated_time / 60)
                        estimated_seconds = int(estimated_time % 60)
                        time_str = f"{estimated_minutes}–º {estimated_seconds}—Å"
                        
                        await progress_callback(processed_files[0], total_files, time_str)
                        await asyncio.sleep(0.1)
                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {item.name}: {str(e)}")
                        continue
                    
                elif item.file is None:  # –≠—Ç–æ –ø–∞–ø–∫–∞
                    await self.scan_folder_recursive(item.path, conn, cursor, processed_files, total_files, files_added, start_time, progress_callback)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {path}: {str(e)}")

    def get_public_link(self, path):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
            resource = self.yadisk.get_meta(path)
            if not resource.public_url:
                resource = self.yadisk.publish(path)
            return resource.public_url
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {path}: {str(e)}")
            return path  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É

    async def add_folder_tag(self, folder_path, tag):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥ –∫ –ø–∞–ø–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'INSERT INTO folder_tags (folder_path, tag) VALUES (?, ?)',
                    (folder_path, tag)
                )
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–≥ '{tag}' –∫ –ø–∞–ø–∫–µ {folder_path} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ –∫ –ø–∞–ø–∫–µ {folder_path}: {str(e)}")
            raise

    def get_folder_tags(self, folder_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–µ–≥–∏ –ø–∞–ø–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'SELECT tag FROM folder_tags WHERE folder_path = ? ORDER BY created_at DESC',
                    (folder_path,)
                )
                return [row[0] for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤ –ø–∞–ø–∫–∏ {folder_path}: {str(e)}")
            return []

    def folder_exists(self, folder_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
        try:
            self.yadisk.get_meta(folder_path)
            return True
        except:
            return False

    def create_folder(self, folder_path):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É"""
        try:
            self.yadisk.mkdir(folder_path)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {folder_path}: {str(e)}")
            return False

    def update_paths_in_database(self, old_path, new_path):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–∞–ø–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ images
                cursor.execute('''
                    UPDATE images 
                    SET image_path = REPLACE(image_path, ?, ?),
                        folder_path = REPLACE(folder_path, ?, ?)
                    WHERE image_path LIKE ? || '%' 
                    OR folder_path LIKE ? || '%'
                ''', (old_path, new_path, old_path, new_path, old_path, old_path))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ folder_tags
                cursor.execute('''
                    UPDATE folder_tags 
                    SET folder_path = REPLACE(folder_path, ?, ?)
                    WHERE folder_path LIKE ? || '%'
                ''', (old_path, new_path, old_path))
                
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {old_path} -> {new_path}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False

    async def move_folder(self, source_path, target_path):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–∞–ø–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            folder_name = os.path.basename(source_path)
            new_path = os.path.join(target_path, folder_name)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞–ø–∫—É
            self.yadisk.move(source_path, new_path)
            logger.info(f"–ü–∞–ø–∫–∞ {source_path} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ {target_path}")
            
            # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if not self.update_paths_in_database(source_path, new_path):
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—É—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            return new_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {source_path}: {str(e)}")
            raise

    def cleanup_database(self):
        """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT DISTINCT image_path FROM images')
                paths = cursor.fetchall()
                
                for (path,) in paths:
                    try:
                        self.yadisk.get_meta(path)
                    except:
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã
                        cursor.execute('DELETE FROM images WHERE image_path = ?', (path,))
                        logger.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã: {path}")
                
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    async def update_folder_status(self, source_folder, target_folder, new_path, status, processed_at):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO folder_status 
                    (source_folder, target_folder, new_path, status, processed_at)
                    VALUES (?, ?, ?, ?, ?)
                ''', (source_folder, target_folder, new_path, status, processed_at))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ images
                if new_path:
                    self.update_paths_in_database(source_folder, new_path)
                
                logger.info(
                    f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ {source_folder}:\n"
                    f"- –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: {target_folder}\n"
                    f"- –ù–æ–≤—ã–π –ø—É—Ç—å: {new_path}\n"
                    f"- –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"- –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processed_at}"
                )
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–ø–∫–∏ {source_folder}: {str(e)}")
            raise

    def get_folder_status(self, folder_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–∞–ø–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT status, processed_at, target_folder, new_path
                    FROM folder_status
                    WHERE source_folder = ?
                    ORDER BY processed_at DESC
                ''', (folder_path,))
                return cursor.fetchall()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–ø–∫–∏ {folder_path}: {str(e)}")
            return []

    def get_current_folder_files(self, folder_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
        try:
            files = []
            items = self.yadisk.get_meta(folder_path).embedded.items
            for item in items:
                if item.file is not None and item.path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                    files.append(item.path)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ {folder_path}")
            return files
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ {folder_path}: {str(e)}")
            raise

    def get_similar_files(self, source_folder, target_folder, threshold=91):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT DISTINCT image_path 
                    FROM images 
                    WHERE folder_path = ? 
                    AND EXISTS (
                        SELECT 1 
                        FROM images i2 
                        WHERE i2.folder_path = ? 
                        AND similarity >= ?
                    )
                ''', (source_folder, target_folder, threshold))
                similar_files = [os.path.basename(row[0]) for row in cursor.fetchall()]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(similar_files)} –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏ {source_folder} –∏ {target_folder}")
                return similar_files
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
            return []

    async def move_file(self, source_path, target_folder):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        try:
            file_name = os.path.basename(source_path)
            new_path = os.path.join(target_folder, file_name)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º timestamp
            try:
                self.yadisk.get_meta(new_path)
                name, ext = os.path.splitext(file_name)
                new_path = f"{target_folder}/{name}_{int(time.time())}{ext}"
            except:
                pass
            
            self.yadisk.move(source_path, new_path)
            logger.info(f"–§–∞–π–ª {source_path} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {new_path}")
            return new_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {source_path}: {str(e)}")
            return None

    async def update_file_location(self, old_path, new_path, new_folder):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE images 
                    SET image_path = ?, folder_path = ?
                    WHERE image_path = ?
                ''', (new_path, new_folder, old_path))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {old_path} -> {new_path}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False