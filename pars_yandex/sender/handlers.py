import asyncio
from aiogram import types, F, Router, html, Bot
from aiogram.types import (Message, CallbackQuery,
                           InputFile, FSInputFile,
                            MessageEntity, InputMediaDocument,
                            InputMediaPhoto, InputMediaVideo, Document,
                            ReactionTypeEmoji)
from aiogram.filters import Command, StateFilter,ChatMemberUpdatedFilter

from pprint import pprint
from aiogram.fsm.context import FSMContext

from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

import re
from dotenv import load_dotenv
import os

from loguru import logger
from workGS import Sheet
# from workSelenium import get_info
# from pars_avito import get_info_avito
load_dotenv()
TOKEN = os.getenv('SENDER_BOT_TOKEN')

router = Router()

bot = Bot(token=TOKEN,)

s=Sheet('profzaboru-5f6f677a3cd8.json','–û–±—ä–µ–∫—Ç—ã —Ç–µ—Å—Ç','–û–±—ä–µ–∫—Ç—ã')

from loguru import logger
logger.add("logs/parsBot_{time}.log",format="{time} - {level} - {message}", rotation="100 MB", retention="10 days", level="DEBUG")





        
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv
from ydWork import YandexDiskManager  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞
from workBitrix import get_prepare_active_deals, Deal
import postgreWork
load_dotenv()

BOT_TOKEN = os.getenv('SENDER_BOT_TOKEN')
# YANDEX_TOKEN = os.getenv('YANDEX_TOKEN')
APLICATION_ID = os.getenv('APLICATION_ID')
APLICATION_SECRET = os.getenv('APLICATION_SECRET')
TOKEN_YD = os.getenv('TOKEN_YD')

bot = Bot(token=BOT_TOKEN)
# dp = Dispatcher()
# yadisk_manager = YandexDiskManager(token=YANDEX_TOKEN)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
# yandexManager=YandexDiskManager(APLICATION_ID=APLICATION_ID, APLICATION_SECRET=APLICATION_SECRET, TOKEN_YD=TOKEN_YD)

Yd=YandexDiskManager(APLICATION_ID=APLICATION_ID, APLICATION_SECRET=APLICATION_SECRET, TOKEN_YD=TOKEN_YD, isTest=True)

class UploadStates(StatesGroup):
    waiting_for_folder = State()
    waiting_for_photos = State()
    get_deal_id=State()
    folder=State()

@router.message(Command("start"))
async def cmd_start(message: types.Message):

    print('start')
    try:
        postgreWork.add_new_user(
            userID=message.from_user.id,
            nickname=message.from_user.username
        )
    except:
        1+0
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")]], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ.", reply_markup=keyboard)
    return 0

@router.message(F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
async def upload_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1 —Ñ–æ—Ç–æ —Å—Ç–∞–¥–∏–æ–Ω –∑–æ—Ä–∫–∏–π ([–Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏] [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∞–ø–∫–∏]):")
    deals, dealDict= await get_prepare_active_deals()
    print(deals)
    print(repr(deals))  # This will show the raw string, including escape characters
    try:
        # deals =re.sub(r'[^\x20-\x7E]', '', deals)  # Remove non-printable characters

        await message.answer(f"{deals}", parse_mode="HTML")
    except:
        deals1=f"{deals[:len(deals)//2]}"
        await message.answer(deals1)
        deals1=f"{deals[len(deals)//2:]}"
        await message.answer(deals1)
    
    
    projectID=postgreWork.get_last_project_for_user(userID=message.from_user.id)
    
    if projectID==None:
        projectID=0
    else:
        projectID=projectID.id
    
    await state.set_state(UploadStates.waiting_for_folder)
    await state.update_data(deals=dealDict, projectID=projectID)
    # await state.set_state(UploadStates.get_deal_id)
    return 0




@router.message(UploadStates.waiting_for_folder)
async def process_folder(message: types.Message, state: FSMContext):
    data = await state.get_data()
    numberDeal=int(message.text.split(' ')[0])
    try:
        dealID=data['deals'][numberDeal]['ID']
        dealTitle=data['deals'][numberDeal]['TITLE']
        dealUrlFolder=data['deals'][numberDeal][Deal.urlFolder]
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏")
        return 0
    data = await state.update_data(deals=data['deals'][numberDeal])
    #—É–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    folderTitle=message.text.replace(f'{numberDeal} ', '')
    
    await state.update_data(folder=folderTitle, 
                            folderTitle=dealTitle,
                            dealID=dealID,
                            dealUrlFolder=dealUrlFolder,
                            photos=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    
    await message.answer(f"–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É {dealTitle}.\n[—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É]({dealUrlFolder})\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):")
    # await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"
    # keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    # keyboard.add(KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"))
    
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")]], resize_keyboard=True)

    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.", reply_markup=keyboard)
    await state.set_state(UploadStates.waiting_for_photos)
    return 0

@router.message(UploadStates.waiting_for_photos, F.photo)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    pprint(data)
    folder = data['folder']
    photos = data['photos']
    
    projectID=data['projectID']

    pprint(message.photo)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo=message.photo[-1]
    # for photo in message.photo[-1]:
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    downloaded_file = await bot.download_file(file_path=file_path, destination=f'photos/{file_id}.jpg')
    
    filename = f"{file_id}.jpg"
    yadisk_path = f"/{folder}/{filename}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
    pathFile=f'photos/{file_id}.jpg'
    photos.append(pathFile)
    pprint(photos)


    Yd.create_folder_and_upload_file(publickURL=data['dealUrlFolder'], 
                                                    folderName=folder, 
                                                    fileName=filename, 
                                                    fileURL=pathFile,
                                                    projectID=projectID)
                                                    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    await state.update_data(photos=photos)
    
    await message.react(reaction=[ReactionTypeEmoji(emoji='ü´°')], is_big=True)
    # await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.")
    
    return 0






@router.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
async def upload_photos(message: types.Message, state: FSMContext):
    data=await state.get_data()
    keyboard=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–ê ‚úÖ")], [KeyboardButton(text="–ù–ï–¢ ‚ùå")]], resize_keyboard=True)

    
    userID=message.from_user.id

     
    project=postgreWork.get_last_project_for_user(userID)
    if project is None:
        await message.answer(f"–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n–£ –≤–∞—Å –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ \"–ù–ï–¢ ‚ùå\"", reply_markup=keyboard)
        return 0
    dat=f"""{project.name}
–ê–¥—Ä–µ—Å: {project.address}
–¢–µ–ª–µ—Ñ–æ–Ω: {project.phone}
–ü–∞–ø–∫–∞: {project.folder_url}
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {project.time_work}
"""
    await message.answer(f"–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n{dat}", reply_markup=keyboard)
    return 0
    if not project.isAddtoSheet:
        
        s.add_new_location(name=project.name,
                    address=project.address,
                    phone=project.phone,
                    email='asd@asd.tu',
                    folderURL=project.folder_url,
                    timeWork=project.time_work,
                    status='–ù–æ–≤—ã–π'
                       )
        
        s.add_new_location(name=project.name,
                    address='',
                    phone='',
                    email='',
                    folderURL=project.folder_url,
                    timeWork='',
                    status='–ù–æ–≤—ã–π'
                       )
        postgreWork.update_project(projectID=project.id, isAddtoSheet=True)
        

    try:
        folder=data['folder']
    except:
        
        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=keyboard)
        await state.clear()
        return 0
    await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫—É '{folder}' –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.", keyboard=keyboard)
    # await state.set_state(UploadStates.waiting_for_folder)
    await state.clear()    
    return 0
@router.message(F.text == "–î–ê ‚úÖ")
async def upload_photos(message: types.Message, state: FSMContext):
    data=await state.get_data()

    keyboard=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")]], resize_keyboard=True)
    userID=message.from_user.id

    project=postgreWork.get_last_project_for_user(userID)
    
    # pprint(project.__dict__)
    if not project.is_add_to_sheet:
        
        s.add_new_location(name=project.name,
                    address=project.address,
                    phone=project.phone,
                    email='asd@asd.tu',
                    folderURL=project.folder_url,
                    timeWork=project.time_work,
                    status='–ù–æ–≤—ã–π'
                       )
        
        # s.add_new_location(name=project.name,
        #             address='',
        #             phone='',
        #             email='',
        #             folderURL=project.folder_url,
        #             timeWork='',
        #             status='–ù–æ–≤—ã–π'
        #                )
        postgreWork.update_project(projectID=project.id, isAddtoSheet=True)
        
    try:
        folder=data['folder']
    except:
        
        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=keyboard)
        await state.clear()
        return 0
    await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫—É '{folder}' –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.", keyboard=keyboard)
    # await state.set_state(UploadStates.waiting_for_folder)
    await state.clear()    
    return 0


@router.message(F.text == "–ù–ï–¢ ‚ùå")
async def upload_photos(message: types.Message, state: FSMContext):
    data=await state.get_data()

    keyboard=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")]], resize_keyboard=True)
    userID=message.from_user.id

    project=postgreWork.get_last_project_for_user(userID)
    

    s.add_new_location(name=project.name,
                    address='',
                    phone='',
                    email='',
                    folderURL=project.folder_url,
                    timeWork='',
                    status='–ù–æ–≤—ã–π'
                       )
    
    postgreWork.update_project(projectID=project.id, isAddtoSheet=True)
    # if not project.isAddtoSheet:
        
        # s.add_new_location(name=project.name,
        #             address=project.address,
        #             phone=project.phone,
        #             email='asd@asd.tu',
        #             folderURL=project.folder_url,
        #             timeWork=project.time_work,
        #             status='–ù–æ–≤—ã–π'
        #                )
        
        
        
        
    try:
        folder=data['folder']
    except:
        
        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=keyboard)
        await state.clear()
        return 0
    
    await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫—É '{folder}' –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.", keyboard=keyboard)
    # await state.set_state(UploadStates.waiting_for_folder)
    await state.clear()    
    return 0





@router.message(UploadStates.waiting_for_photos)
async def process_non_photo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.")
    return 0

# @router.message(UploadStates.waiting_for_photos, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
# async def finish_upload(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     pprint(data)
#     folder = data['folder']
#     photos = data['photos']

#     # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫
#     # for downloaded_file in photos:
#     #     filename = f"{downloaded_file.file_id}.jpg"  # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
#     #     yadisk_path = f"/{folder}/{filename}"
#     #     yadisk_manager.upload_file(downloaded_file, yadisk_path)
#     pprint(photos)
#     await message.answer(f"–í—Å–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –≤ –ø–∞–ø–∫—É '{folder}'")
#     await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     return 0
# async def main():
#     await router.start_polling(bot)

if __name__ == "__main__":
    # import asyncio
    pass
    # asyncio.run(main())